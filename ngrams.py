import collections
from nltk import ngrams
import numpy as np
import pefile

def read_file(file_path):
    """Reads in the binary sequence of a binary file."""
    with open(file_path,"rb") as binary_file:
        data = binary_file.read()
    return data

def byte_sequence_to_Ngrams(byte_sequence, N):
    # create a list of N-grams from byte sequence
    Ngrams = ngrams(byte_sequence, N)
    return list(Ngrams)

def binary_file_to_Ngram_counts(file, N):
    # takes a binary file and outputs the N-grams counts of its binary sequence
    filebyte_sequence = read_file(file)
    file_Ngrams= byte_sequence_to_Ngrams(filebyte_sequence, N)
    return collections.Counter(file_Ngrams)

def get_NGram_features_from_sample(sample, K1_most_frequent_Ngrams_list):
    """Takes a sample and produces a feature vector.
    The features are the counts of the K1 N-grams we've selected.
    """
    N=2
    K1 = len(K1_most_frequent_Ngrams_list)
    feature_vector = K1 * [0]
    file_Ngrams = binary_file_to_Ngram_counts(sample, N)
    for i in range(K1):
        feature_vector[i] = file_Ngrams[K1_most_frequent_Ngrams_list[i]]
    return feature_vector

def k1_most_frequent_Ngrams(samples_train, K1=100, N=2):
    # N = 2
    Ngram_counts_all = collections.Counter([])
    for sample in samples_train:
        Ngram_counts_all += binary_file_to_Ngram_counts(sample, N)
    # K1 = 100
    K1_most_frequent_Ngrams = Ngram_counts_all.most_common(K1)
    K1_most_frequent_Ngrams_list = [x[0] for x in K1_most_frequent_Ngrams]
    return K1_most_frequent_Ngrams_list